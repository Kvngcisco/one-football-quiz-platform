AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: One Football (OFC) Quiz Platform Infrastructure

Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Environment name

Resources:
  # DynamoDB Table
  QuizScoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QuizScores
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
        - AttributeName: quizType
          AttributeType: S
        - AttributeName: score
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username-quizType-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
            - AttributeName: quizType
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: quizType-score-index
          KeySchema:
            - AttributeName: quizType
              KeyType: HASH
            - AttributeName: score
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt QuizScoresTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub "${QuizScoresTable.Arn}/index/*"

  # Submit Score Lambda Function
  SubmitScoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "quiz-submit-score-${Environment}"
      CodeUri: ../backend/lambda/
      Handler: submit-score.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref QuizScoresTable
      Events:
        SubmitScoreApi:
          Type: Api
          Properties:
            RestApiId: !Ref QuizApi
            Path: /submit-score
            Method: post

  # Get Leaderboard Lambda Function
  GetLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "quiz-get-leaderboard-${Environment}"
      CodeUri: ../backend/lambda/
      Handler: get-leaderboard.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref QuizScoresTable
      Events:
        GetLeaderboardApi:
          Type: Api
          Properties:
            RestApiId: !Ref QuizApi
            Path: /leaderboard/{quizType}
            Method: get

  # API Gateway
  QuizApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "quiz-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "quiz-platform-frontend-${Environment}-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket}/*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub "https://${QuizApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  FrontendBucketName:
    Description: S3 Bucket for Frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub "${AWS::StackName}-FrontendBucket"
  
  CloudFrontUrl:
    Description: CloudFront Distribution URL
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontUrl"